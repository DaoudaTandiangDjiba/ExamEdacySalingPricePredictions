# Missing data
missing_data <- train %>% summarise_all(funs(sum(is.na(.))/n()))
View(missing_data)
# Transform it as a dataframe with 2 columns
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
View(missing_data)
# Plot dimension
options(repr.plot.width = 6, repr.plot.height = 4)
# Missing data barplot
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.3)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.3)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
View(test)
# Add a "SalePrice" variable to the test set to allow for combining data sets
test.SalePrice <- data.frame(SalePrice = rep("None", nrow(test)), test[,])
View(test.SalePrice)
View(train)
# Combine data sets
data.combined <- rbind(train, test.SalePrice)
View(data.combined)
# Missing data
missing_data <- data.combined %>% summarise_all(funs(sum(is.na(.))/n()))
View(missing_data)
# Transform it as a dataframe with 2 columns
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
# Transform it as a dataframe with 2 columns
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.5)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
Missingdata_barplot <- ggplot(missing_data, aes(x = variables, y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.5)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.5)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.5)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
options(repr.plot.width = 12, repr.plot.height = 8)
# Missing data barplot
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.3)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
options(repr.plot.width = 12, repr.plot.height = 8)
# Missing data barplot
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.1)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
dim(data.combined)
summary(data.combined$SalePrice)
# Take a look to the saling price
summary(train$SalePrice)
summary(data.combined$SalePrice)
str(data.combined)
data.combined$SalePrice <- as.integer(data.combined$SalePrice)
summary(data.combined$SalePrice)
# Add a "SalePrice" variable to the test set to allow for combining data sets
summary(train$SalePrice)
str(train)
str(data.combined)
# Missing data
missing_data <- data.combined %>% summarise_all(funs(sum(is.na(.))/n()))
# Transform it as a dataframe with 2 columns
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
# visualize the missing data percent for each variables
# Plot dimension
options(repr.plot.width = 12, repr.plot.height = 8)
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.1)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
ggplot(data.combined[!is.na(data.combined$SalePrice),], aes(x = SalePrice)) +
geom_histogram(binwidth = 10000) +
xlab("SalePrice") +
ylab("Total Count")
ggplot(data.combined[!is.na(data.combined$SalePrice),], aes(x = SalePrice)) +
geom_histogram(binwidth = 10000) +
xlab("SalePrice") +
ylab("Total Count")
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
ggplot(data.combined[!is.na(data.combined$SalePrice),], aes(x = SalePrice)) +
geom_histogram(fill = "Green", binwidth = 10000) +
xlab("SalePrice") +
ylab("Total Count")
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
ggplot(data.combined[!is.na(data.combined$SalePrice),], aes(x = SalePrice)) +
geom_histogram(fill = "Blue", binwidth = 10000) +
xlab("SalePrice") +
ylab("Total Count")
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
ggplot(data.combined[!is.na(data.combined$SalePrice),], aes(x = SalePrice)) +
geom_histogram(fill = "Blue", binwidth = 10000) +
xlab("SalePrice") +
ylab("Total Count") +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
library(scales)
ggplot(data.combined[!is.na(data.combined$SalePrice),], aes(x = SalePrice)) +
geom_histogram(fill = "Blue", binwidth = 10000) +
xlab("SalePrice") +
ylab("Total Count") +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
summary(data.combined$SalePrice)
ggplot(data.combined[!is.na(data.combined$SalePrice),], aes(x = SalePrice)) +
geom_histogram(binwidth = 10000) +
xlab("SalePrice") +
ylab("Total Count") +
scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
# Take a look to the saling price
summary(data.combined$SalePrice)
options(repr.plot.width =4, repr.plot.height = 4)
boxplot(data.combined$SalePrice)$out
# Missing data
nacolumn <- which(col(is.na(data.combined))>0)
sort(col(sapply(all[nacolumn], is.na)), decreasing = FALSE)
nacolumn <- which(colSums(is.na(data.combined)) > 0)
sort(colSums(sapply(all[nacolumn], is.na)), decreasing = FALSE)
library(plyr)
library(tidyverse)
library(MASS)
library(car)
library(e1071)
library(caret)
library(cowplot)
library(caTools)
library(pROC)
library(ggcorrplot)
library(reshape)
library(scales)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Add a "SalePrice" variable to the test set to allow for combining data sets
summary(train$SalePrice)
test.SalePrice <- data.frame(SalePrice = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.SalePrice)
data.combined$SalePrice <- as.integer(data.combined$SalePrice)
dim(data.combined)
summary(data.combined$SalePrice)
missing_data <- data.combined %>% summarise_all(funs(sum(is.na(.))/n()))
# Transform it as a dataframe with 2 columns
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
options(repr.plot.width = 12, repr.plot.height = 8)
# Missing data barplot
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.1)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
nacolumn <- which(colSums(is.na(data.combined)) > 0)
sort(colSums(sapply(all[nacolumn], is.na)), decreasing = FALSE)
sort(colSums(sapply(all[nacolumn], is.na)), decreasing = TRUE)
sort(colSums(sapply(data.combined[nacolumn], is.na)), decreasing = TRUE)
names(nacolumn)
data.combined$SalePrice[is.na(data.combined$SalePrice)] <- 0
View(data.combined)
data.combined_full <- data.combined[complete.cases(data.combined),]
View(data.combined_full)
data.combined_full <- data.combined[,complete.cases(data.combined)]
data.combined_full <- data.combined[complete.cases(data.combined),complete.cases(data.combined)]
# 34 variables with NAs, NAs in SalePrice is from the test set.
# Imputing missing values
# Fence variable
table(data.combined$Fence)
# 34 variables with NAs, NAs in SalePrice is from the test set.
# Imputing missing values
# Fence variable
table(data.combined$Fence, na.rm = FALSE)
# The NAs value on the Fence means None
data.combined$Fence[is.na(data.combined$SalePrice)] <- 'None'
# The NAs value on the Fence means None
data.combined$Fence[is.na(data.combined$Fence)] <- 'No Fence'
str(data.combined)
# The NAs value on the Fence means None
data.combined$Fence[is.na(data.combined$Fence)] <- 'No Fence'
# 34 variables with NAs, NAs in SalePrice is from the test set.
# Imputing missing values
# Fence variable
table(data.combined$Fence)
# The NAs value on the Fence means None
data.combined$Fence[is.na(data.combined$Fence)] <- "No Fence"
train <- read.csv("train.csv", header=TRUE, stringsAsFactors = FALSE)
test <- read.csv("test.csv",header=TRUE, stringsAsFactors = FALSE)
test.SalePrice <- data.frame(SalePrice = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.SalePrice)
data.combined$SalePrice <- as.integer(data.combined$SalePrice)
summary(data.combined$SalePrice)
missing_data <- data.combined %>% summarise_all(funs(sum(is.na(.))/n()))
View(missing_data)
# Transform it as a dataframe with 2 columns
missing_data <- gather(missing_data, key = "variables", value = "percent_missing")
# visualize the missing data percent for each variables
# Plot dimension
options(repr.plot.width = 12, repr.plot.height = 8)
# Missing data barplot
Missingdata_barplot <- ggplot(missing_data, aes(x = reorder(variables, percent_missing), y = percent_missing)) +
geom_bar(stat = "identity", fill = "red", aes(color = I('white')), size = 0.1)+
xlab('variables')+
coord_flip()+
theme_bw()
Missingdata_barplot
nacolumn <- which(colSums(is.na(data.combined)) > 0)
sort(colSums(sapply(data.combined[nacolumn], is.na)), decreasing = TRUE)
# The NAs value on the Fence means None
data.combined$Fence[is.na(data.combined$Fence)] <- "No Fence"
str(data.combined)
# 34 variables with NAs, NAs in SalePrice is from the test set.
# Imputing missing values
# Fence variable
table(data.combined$Fence)
ggplot(data.combined, aes(x = Fence)) +
geom_bar() +
xlab("Fence") +
ylab("Total Count")+
theme_bw()
ggplot(data.combined, aes(x = Fence)) +
geom_bar(fill = 'Blue') +
xlab("Fence") +
ylab("Total Count")+
theme_bw()
# check out the Bedroom variable
str(data.combined)
ggplot(data.combined, aes(x = Bedroom )) +
geom_histogram(binwidth = ) +
xlab("Bedroom") +
ylab("Total Count")
ggplot(data.combined, aes(x = BedroomAbvGr )) +
geom_histogram(binwidth = ) +
xlab("Bedroom") +
ylab("Total Count")
ggplot(data.combined, aes(x = BedroomAbvGr )) +
geom_histogram(binwidth = 5) +
xlab("Bedroom") +
ylab("Total Count")
ggplot(data.combined, aes(x = BedroomAbvGr )) +
geom_histogram(binwidth = 2) +
xlab("Bedroom") +
ylab("Total Count")
ggplot(data.combined, aes(x = BedroomAbvGr )) +
geom_histogram(binwidth = 1) +
xlab("Bedroom") +
ylab("Total Count")
ggplot(data.combined, aes(x = BedroomAbvGr )) +
geom_histogram(binwidth = 1) +
xlab("Bedroom") +
ylab("Total Count")
scale_x_continuous(breaks= seq(0, 10, by=2), labels = comma)
tale(data.combined$BedroomAbvGr)
table(data.combined$BedroomAbvGr)
data.combined$BedroomAbvGr <- as.factor(data.combined$BedroomAbvGr)
ggplot(data.combined, aes(x = BedroomAbvGr )) +
geom_bar() +
xlab("Bedroom") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined, aes(x = SaleCondition )) +
geom_bar() +
xlab("Sale condition") +
ylab("Total Count") +
theme_bw()
#Check out the Sale condition varibale
table(data.combined$SaleCondition)
data.combined_full <- data.combined[complete.cases(data.combined),]
names(data.combined)
table(data.combined$PoolQC)
table(data.combined$PoolQC, rm.na = FALSE)
table(data.combined$PoolQC, is.na = FALSE)
data.combined$PoolQC[is.na(data.combined$PoolQC)] <- "No Pool"
# The NAs value on the Fence means None
data.combined$Fence[is.na(data.combined$Fence)] <- "No Fence"
table(data.combined$PoolQC)
# 34 variables with NAs, NAs in SalePrice is from the test set.
# Imputing missing values
# only Fence variable needed
table(data.combined$Fence)
data.combined_full <- data.combined[c(20,29,53,62,73,74,,52,80,81)]
data.combined_full <- data.combined[c(20,29,53,62,73,74,52,80,81)]
View(data.combined_full)
table(data.combined$ExterCond)
str(data.combined_full)
data.combined_full$ExterCond <- as.factor(data.combined_full$ExterCond)
data.combined_full$ExterCond <- as.factor(data.combined_full$ExterCond)
data.combined_full$PoolQC <- as.factor(data.combined_full$PoolQC)
data.combined_full$Fence <- as.factor(data.combined_full$Fence)
data.combined_full$SaleCondition <- as.factor(data.combined_full$SaleCondition)
table(data.combined$BedroomAbvGr)
ggplot(data.combined, aes(x = BedroomAbvGr )) +
geom_bar() +
xlab("Bedroom") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined, aes(x = SaleCondition )) +
geom_bar() +
xlab("Sale condition") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined, aes(x = ExterCond )) +
geom_bar() +
xlab("Extern condition") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined, aes(x = PoolQC )) +
geom_bar() +
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
names(data.combined_full)
correlation <- round(cor(data.combined_full[,c("YearBuilt","ExterCond","KitchenAbvGr","GarageCars","PoolQC","Fence","BedroomAbvGr",
"SaleCondition","SalePrice")]), 1)
str(data.combined_full)
data.combined_full$BedroomAbvGr <- as.integer(data.combined_full$BedroomAbvGr)
data.combined_full$BedroomAbvGr <- as.integer(data.combined_full$BedroomAbvGr)
str(data.combined_full)
correlation <- round(cor(data.combined_full[,c("YearBuilt","KitchenAbvGr","GarageCars","BedroomAbvGr",
"SalePrice")]), 1)
ggcorrplot(correlation,  title = "Correlation")+theme(plot.title = element_text(hjust = 0.5))
table(data.combined_full$GarageCars)
correlation <- round(cor(data.combined_full[,c("YearBuilt","KitchenAbvGr","BedroomAbvGr",
"SalePrice")]), 1)
ggcorrplot(correlation,  title = "Correlation")+theme(plot.title = element_text(hjust = 0.5))
correlation <- round(cor(data.combined_full[1:1460][,c("YearBuilt", "KitchenAbvGr", "GarageCars","BedroomAbvGr","SalePrice")]), 1)
correlation <- round(cor(data.combined_full[1:1460,][,c("YearBuilt", "KitchenAbvGr", "GarageCars","BedroomAbvGr","SalePrice")]), 1)
ggcorrplot(correlation,  title = "Correlation")+theme(plot.title = element_text(hjust = 0.5))
table(data.combined$OverallQual)
#======================================New Dataset=============================================================
data.combined_full <- data.combined[c(18,20,29,53,62,73,74,52,80,81)]
correlation <- round(cor(data.combined_full[1:1460,][,c("YearBuilt", "OverallQual","KitchenAbvGr", "GarageCars","BedroomAbvGr","SalePrice")]), 1)
str(data.combined_full)
data.combined_full$BedroomAbvGr <- as.integer(data.combined_full$BedroomAbvGr)
correlation <- round(cor(data.combined_full[1:1460,][,c("YearBuilt","OverallQual","KitchenAbvGr", "GarageCars","BedroomAbvGr","SalePrice")]), 1)
ggcorrplot(correlation,  title = "Correlation")+theme(plot.title = element_text(hjust = 0.5))
data.combined_full$SalePrice2[data.combined_full$SalePrice >=34900 & data.combined_full$SalePrice <=129975 ] <- 'Cheap'
data.combined_full$SalePrice2[data.combined_full$SalePrice > 129975 & data.combined_full$SalePrice <= 180921] <- 'Medium'
data.combined_full$SalePrice2[data.combined_full$SalePrice > 180921 & data.combined_full$SalePrice <= 755000] <- 'Expensive'
ggplot(data.combined_full, aes(x = PoolQC, fill = SalePrice2 )) +
geom_bar() +
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
str(data.combined_full)
data.combined_full$SalePrice2 <- as.factor(data.combined_full$SalePrice2)
ggplot(data.combined_full, aes(x = PoolQC, fill = SalePrice2 )) +
geom_bar() +
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full, aes(x = PoolQC )) +
geom_bar() +
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full, aes(x = BedroomAbvGr, fill = SalePrice2 )) +
geom_bar() +
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
table(data.combined_full$SalePrice2)
ggplot(data.combined_full, aes(x = BedroomAbvGr )) +
geom_bar() +
xlab("Bedroom") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full, aes(x = BedroomAbvGr, fill = SalePrice2 )) +
geom_bar() +
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = BedroomAbvGr, fill = SalePrice2 )) +
geom_bar() +
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = PoolQC, fill = SalePrice2 )) +
geom_bar() +
facet_grid(~SalePrice2)
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = PoolQC)) +
geom_bar() +
facet_grid(~SalePrice2)
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = PoolQC, fill = SalePrice2)) +
geom_bar() +
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = BedroomAbvGr, fill = SalePrice2 )) +
geom_bar() +
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = BedroomAbvGr, fill = SalePrice2 )) +
geom_bar() +
facet_grid(~SalePrice2)
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = BedroomAbvGr, fill = SalePrice2 )) +
geom_bar() +
facet_grid(~SalePrice2)+
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = PoolQC, fill = SalePrice2)) +
geom_bar() +
facet_grid(~SalePrice2)+
xlab("Pool quality") +
ylab("Total Count") +
theme_bw()
str(data.combined_full)
ggplot(data.combined_full[1:1460,], aes(x = Fence, fill = SalePrice2 )) +
geom_bar() +
facet_grid(~SalePrice2)+
xlab("Fence") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = SaleCondition, fill = SalePrice2 )) +
geom_bar() +
facet_grid(~SalePrice2)+
xlab("Fence") +
ylab("Total Count") +
theme_bw()
ggplot(data.combined_full[1:1460,], aes(x = ExterCond, fill = SalePrice2 )) +
geom_bar() +
facet_grid(~SalePrice2)+
xlab("Extern condition") +
ylab("Total Count") +
theme_bw()
# Data Preparation
data.combined_full$SalePrice[is.na(data.combined$SalePrice)] <- "None"
data.combined_full$SalePrice2[is.na(data.combined$SalePrice2)] <- "None"
model.rf <- randomForest(SalePrice ~ OverallQual+YearBuilt+ExterCond+KitchenAbGr+GarageCars+PoolQC+Fence+
BedroomAbGr+SaleCondition, data=data.combined_full[1:1460,], proximity=FALSE,importance = FALSE,
ntree=500,mtry=4, do.trace=FALSE)
# ====================================Exploratory modeling==============================================
# Fisrt Model: Random Forest
library(randomForest)
set.seed(123)
model.rf <- randomForest(SalePrice ~ OverallQual+YearBuilt+ExterCond+KitchenAbGr+GarageCars+PoolQC+Fence+
BedroomAbGr+SaleCondition, data=data.combined_full[1:1460,], proximity=FALSE,importance = FALSE,
ntree=500,mtry=4, do.trace=FALSE)
model.rf <- randomForest(SalePrice ~ OverallQual+YearBuilt+ExterCond+KitchenAbvGr+GarageCars+PoolQC+Fence+
BedroomAbvGr+SaleCondition, data=data.combined_full[1:1460,], proximity=FALSE,importance = FALSE,
ntree=500,mtry=4, do.trace=FALSE)
data.combined_full$SalePrice <- as.factor(data.combined_full$SalePrice)
model.rf <- randomForest(SalePrice ~ OverallQual+YearBuilt+ExterCond+KitchenAbvGr+GarageCars+PoolQC+Fence+
BedroomAbvGr+SaleCondition, data=data.combined_full[1:1460,], proximity=FALSE,importance = FALSE,
ntree=500,mtry=4, do.trace=FALSE)
str(data.ciom)
str(data.combined_full)
model.rf <- randomForest(SalePrice ~ OverallQual+YearBuilt+ExterCond+KitchenAbvGr+GarageCars+PoolQC+Fence+
BedroomAbvGr+SaleCondition, data=data.combined_full[1:1460,],
ntree=150)
model.rf <- randomForest(formula(SalePrice ~ OverallQual+YearBuilt+ExterCond+KitchenAbvGr+GarageCars+PoolQC+Fence+
BedroomAbvGr+SaleCondition, data=data.combined_full[1:1460,],
ntree=150))
model.rf <- randomForest(formula("SalePrice ~ OverallQual+YearBuilt+ExterCond+KitchenAbvGr+GarageCars+PoolQC+Fence+
BedroomAbvGr+SaleCondition, data=data.combined_full[1:1460,],
ntree=150"))
names(data.combined_full)
randomForest(y = data.combined_full$SalePrice, x = data.combined_full[,c(1,2,3,4,5,6,7,8,9,10)], ntree=100, keep.forest=FALSE, importance=TRUE)
randomForest(y = data.combined_full$SalePrice, x = data.combined_full[,c(1,2,3,4,5,6,7,8,9)], ntree=100, keep.forest=FALSE, importance=TRUE)
randomForest(y = data.combined_full$SalePrice, x = data.combined_full[,c("OverallQual","YearBuilt","ExterCond","KitchenAbvGr","GarageCars","PoolQC","Fence","BedroomAbvGr","SaleCondition")], ntree=100, keep.forest=FALSE, importance=TRUE)
randomForest(y = data.combined_full$SalePrice[1:1460,], x = data.combined_full[1:1460,][,c("OverallQual","YearBuilt","ExterCond","KitchenAbvGr",
"GarageCars","PoolQC","Fence","BedroomAbvGr","SaleCondition")],
randomForest(y = data.combined_full$SalePrice[1:1460,], x = data.combined_full[1:1460,][,c("OverallQual","YearBuilt","ExterCond","KitchenAbvGr",
"GarageCars","PoolQC","Fence","BedroomAbvGr","SaleCondition")],
ntree=100, keep.forest=FALSE, importance=TRUE)
randomForest(y = data.combined_full$SalePrice[1:1460,], x = data.combined_full[1:1460,][,c("OverallQual","YearBuilt","ExterCond","KitchenAbvGr",
"GarageCars","PoolQC","Fence","BedroomAbvGr","SaleCondition")],ntree=100, keep.forest=FALSE, importance=TRUE)
randomForest(y = data.combined_full$SalePrice[1:1460,], x = data.combined_full[1:1460,][,c("OverallQual","YearBuilt","ExterCond","KitchenAbvGr",
"GarageCars","PoolQC","Fence","BedroomAbvGr","SaleCondition")],ntree=100)
randomForest(y = data.combined_full$SalePrice[1:1460,], x = data.combined_full[1:1460,][,c("OverallQual","YearBuilt","ExterCond","KitchenAbvGr",
"GarageCars","PoolQC","Fence","BedroomAbvGr","SaleCondition")],ntree=500)
set.seed(2018)
data.combined_full$SalePrice <- as.factor(data.combined_full$SalePrice)
randomForest(y = data.combined_full$SalePrice[1:1460,], x = data.combined_full[1:1460,][,c("OverallQual","YearBuilt","ExterCond","KitchenAbvGr",
"GarageCars","PoolQC","Fence","BedroomAbvGr","SaleCondition")],ntree=500)
